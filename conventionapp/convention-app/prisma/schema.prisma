// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}

// day of
model Attendee {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  age            Int
  email          String
  gender         Gender
  checkedIn      Boolean @default(false)
  timesCheckedIn Int
}

model OnlineGroup {
  id             String @id
  firstName      String
  lastName       String
  email          String
  totalTickets   Int
  timesCheckedIn Int
}

model QuranAttendee {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  age       Int
  gender    String
  email     String
  checkedIn Boolean @default(false)
  level     Int
}

model BazaarSponsorGroup {
  id              Int    @id @default(autoincrement())
  firstName       String
  lastName        String
  age             Int
  gender          String
  email           String
  numberCheckedIn Int
  totalNumber     Int
}

model SpeakerAndGroup {
  id              Int    @id @default(autoincrement())
  firstName       String
  lastName        String
  age             Int
  gender          String
  email           String
  numberCheckedIn Int
  totalNumber     Int
}

enum Gender {
  MALE
  FEMALE
}
